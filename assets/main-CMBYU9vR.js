import"./modulepreload-polyfill-B5Qt9EMX.js";/* empty css              */console.log("--- script.js module loaded ---");const p=document.getElementById("task-input"),M=document.getElementById("task-details"),y=document.getElementById("task-due-date"),L=document.getElementById("add-button"),u=document.getElementById("task-list"),N=document.getElementById("in-progress-task-list"),m=document.getElementById("completed-task-list"),J=new bootstrap.Modal(document.getElementById("editTaskModal")),P=document.getElementById("edit-task-text"),R=document.getElementById("edit-task-details"),z=document.getElementById("edit-task-due-date"),W=document.getElementById("edit-task-priority"),q=document.getElementById("save-edit-button");let D=null;const v=document.createElement("select");v.id="task-priority";v.className="form-select";v.style.maxWidth="100px";v.innerHTML=`
    <option value="0">なし</option>
    <option value="1">★</option>
    <option value="2">★★</option>
    <option value="3">★★★</option>
`;document.getElementById("input-area").insertBefore(v,L);!p||!y||!L||!u||!m?console.error("Error: Required DOM element not found."):console.log("DOM elements obtained successfully.");function F(t){if(!t)return"";try{const e=new Date(t),o={year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",hour12:!1};return e.toLocaleString("ja-JP",o)}catch(e){return console.error("Error formatting date:",t,e),t}}function j(t){if(!t)return{text:"",className:""};try{const e=new Date(t),o=new Date,n=e.getTime()-o.getTime(),s=Math.floor(n/(1e3*60)),l=Math.floor(n/(1e3*60*60)),i=Math.floor(n/(1e3*60*60*24));return n<0?{text:"期限切れ",className:"overdue"}:s<1?{text:"あとわずか",className:""}:s<60?{text:`あと ${s} 分`,className:""}:l<24?{text:`あと ${l} 時間`,className:""}:{text:`あと ${i} 日`,className:"far"}}catch(e){return console.error("Error calculating remaining time:",t,e),{text:"(日時エラー)",className:"overdue"}}}function S(){console.log("[Debug] updateRemainingTimes called"),document.querySelectorAll(".list-group-item").forEach(t=>{const e=t.querySelector(".remaining-time"),o=t.dataset.dueDate;if(!m.contains(t)&&e&&o){const s=j(o);e.textContent=s.text,e.className="remaining-time",s.className&&e.classList.add(s.className)}else e&&(e.textContent="",e.className="remaining-time")})}function H(){console.log("[Debug] loadTasks called");try{const t=JSON.parse(localStorage.getItem("tasks")||"[]"),e=JSON.parse(localStorage.getItem("deletedTasks")||"[]");console.log("[Debug] Tasks loaded from localStorage:",t),console.log("[Debug] Deleted tasks loaded from localStorage:",e),u?u.innerHTML="":console.error("taskList not found for clearing"),m?m.innerHTML="":console.error("completedTaskList not found for clearing"),t.forEach(o=>{T(o.text,o.status||(o.completed?"completed":"pending"),o.dueDate,!1,o.priority,o.details,o.createdAt)}),console.log("[Debug] Tasks rendered from localStorage."),S()}catch(t){console.error("Error loading or parsing tasks from localStorage:",t)}}function I(){console.log("[Debug] saveTasks called");try{const t=[];document.querySelectorAll("#task-list .list-group-item, #in-progress-task-list .list-group-item, #completed-task-list .list-group-item").forEach(e=>{const o=e.querySelector(".task-text"),n=e.dataset.status,s=e.dataset.dueDate||"",l=parseInt(e.dataset.priority)||0,i=e.dataset.details||"",a=e.dataset.createdAt||new Date().toISOString();o&&o.textContent?t.push({text:o.textContent,status:n,dueDate:s,priority:l,details:i,createdAt:a}):console.warn("[Debug] Item without span or text found:",e)}),localStorage.setItem("tasks",JSON.stringify(t)),console.log("[Debug] Tasks saved to localStorage:",t)}catch(t){console.error("Error saving tasks to localStorage:",t)}}function U(t){console.log("[Debug] saveDeletedTask called");try{const e=JSON.parse(localStorage.getItem("deletedTasks")||"[]");t.deletedAt=new Date().toISOString(),e.push(t),localStorage.setItem("deletedTasks",JSON.stringify(e)),console.log("[Debug] Deleted task saved to localStorage:",t)}catch(e){console.error("Error saving deleted task to localStorage:",e)}}L&&p&&y?(L.addEventListener("click",G),console.log("[Debug] Add button click listener added.")):console.error("Required elements for adding task not found, cannot add click listener.");p?(p.addEventListener("keypress",function(t){t.key==="Enter"&&(t.preventDefault(),G())}),console.log("[Debug] Task input keypress listener added.")):console.error("Task input not found, cannot add keypress listener.");function G(){if(console.log("[Debug] addTask called"),!p||!y){console.error("Input elements missing!");return}const t=p.value.trim(),e=M.value.trim(),o=y.value,n=parseInt(document.getElementById("task-priority").value);console.log("[Debug] Task text:",`"${t}"`,"Due Date:",`"${o}"`,"Priority:",n),t!==""?(T(t,"pending",o,!0,n,e,new Date().toISOString()),p.value="",M.value="",y.value="",document.getElementById("task-priority").value="0",p.focus(),console.log("[Debug] Task potentially added.")):(alert("タスクを入力してください."),console.log("[Debug] Task text was empty."))}function T(t,e="pending",o,n=!0,s=0,l="",i=null){if(console.log(`[Debug] createTaskItem: text='${t}', status=${e}, dueDate='${o}', saving=${n}, priority=${s}, details='${l}'`),!u||!N||!m){console.error("Task list elements not found!");return}try{const a=document.createElement("li");a.classList.add("list-group-item","bg-transparent","border-dark"),o&&(a.dataset.dueDate=o),a.dataset.priority=s,l&&(a.dataset.details=l),a.dataset.createdAt=i||new Date().toISOString(),a.dataset.status=e,console.log(`[Debug] Created list item with status: ${e}, classList: ${a.classList}`);const d=document.createElement("div");d.classList.add("d-flex","align-items-center","bg-transparent");const k=document.createElement("input");k.type="checkbox",k.classList.add("form-check-input","me-2"),k.checked=e==="completed",k.addEventListener("change",_);const g=document.createElement("div");g.classList.add("task-content-wrapper");const h=document.createElement("span");h.classList.add("priority-indicator"),h.textContent="★".repeat(s),g.appendChild(h);const f=document.createElement("span");if(f.classList.add("task-text"),f.textContent=t,g.appendChild(f),o&&e!=="completed"){const r=document.createElement("span");r.classList.add("due-date"),r.textContent=`期限: ${F(o)}`,g.appendChild(r);const c=document.createElement("span");c.classList.add("remaining-time");const b=j(o);c.textContent=b.text,b.className&&c.classList.add(b.className),g.appendChild(c)}if(l){console.log("[Debug] Creating details section for task with details:",l);const r=document.createElement("button");r.classList.add("btn","btn-link","btn-sm","p-0","ms-2","toggle-details"),r.innerHTML='<i class="fas fa-chevron-down"></i>',r.title="詳細を表示/非表示",g.appendChild(r);const c=document.createElement("div");c.classList.add("task-details-container","collapse");const b=B=>{const C=/(https?:\/\/[^\s]+)/g;return B.replace(C,$=>`<a href="${$}" target="_blank" rel="noopener noreferrer" class="text-primary">${$}</a>`)},w=document.createElement("div");w.classList.add("task-details-content","mt-2","p-2"),w.innerHTML=b(l.replace(/\n/g,"<br>")),c.appendChild(w),r.addEventListener("click",B=>{B.stopPropagation(),console.log("[Debug] Toggle details clicked. Current state:",c.classList.contains("show")),c.classList.toggle("show");const C=r.querySelector("i");C.classList.toggle("fa-chevron-up"),C.classList.toggle("fa-chevron-down"),console.log("[Debug] Details container classes after toggle:",c.classList)}),a.appendChild(d),a.appendChild(c),console.log("[Debug] Details container added to list item")}else a.appendChild(d);const E=document.createElement("button");if(E.classList.add("btn","btn-outline-primary","btn-sm","me-2"),E.innerHTML='<i class="fas fa-edit"></i>',E.addEventListener("click",()=>V(a)),e==="pending"){const r=document.createElement("button");r.classList.add("btn","btn-success","btn-sm","me-2"),r.innerHTML='<i class="fas fa-play me-1"></i>Start!',r.addEventListener("click",()=>Y(a)),d.appendChild(r)}const x=document.createElement("button");if(x.classList.add("btn","btn-danger","btn-sm"),x.innerHTML='<i class="fas fa-trash-alt"></i>',x.addEventListener("click",K),e==="completed"){if(console.log("[Debug] Task is completed, adding completed styles"),console.log("[Debug] Before style application - taskSpan classList:",f.classList),console.log("[Debug] Before style application - listItem classList:",a.classList),f.classList.add("text-decoration-line-through"),a.classList.add("completed"),a.classList.remove("bg-transparent"),d.classList.remove("bg-transparent"),a.style.backgroundColor="var(--completed-bg)",d.style.backgroundColor="var(--completed-bg)",f.style.color="var(--completed-text)",g.style.color="var(--completed-text)",h.style.color="var(--completed-text)",l){const r=a.querySelector(".task-details-container");if(r){r.classList.remove("bg-transparent"),r.style.backgroundColor="var(--completed-bg)";const c=r.querySelector(".task-details-content");c&&(c.style.color="var(--completed-text)")}}console.log("[Debug] After style application - taskSpan classList:",f.classList),console.log("[Debug] After style application - listItem classList:",a.classList),console.log("[Debug] After style application - taskSpan style:",f.style.cssText),console.log("[Debug] After style application - listItem style:",a.style.cssText),console.log("[Debug] After style application - contentWrapper style:",g.style.cssText)}return d.appendChild(k),d.appendChild(g),d.appendChild(E),d.appendChild(x),e==="completed"?(console.log("[Debug] Adding task to completed list"),m.appendChild(a)):e==="in-progress"?(console.log("[Debug] Adding task to in-progress list"),N.appendChild(a)):(console.log("[Debug] Adding task to pending list"),u.appendChild(a)),a.classList.add("task-item-entering"),requestAnimationFrame(()=>{a.classList.remove("task-item-entering")}),n&&I(),a}catch(a){console.error("Error in createTaskItem:",a)}}function _(t){console.log("[Debug] toggleTask called");try{const e=t.target,o=e.closest("li");if(!o){console.error("Parent li not found");return}const n=o.querySelector(".task-text");if(!n){console.error("Span not found");return}const s=n.textContent,l=e.checked,i=o.dataset.dueDate||"",a=parseInt(o.dataset.priority)||3,d=o.dataset.details||"";console.log(`[Debug] Toggling task '${s}' to completed=${l}, dueDate='${i}', priority=${a}, details='${d}'`),console.log(`[Debug] Current task classList before toggle: ${o.classList}`),o.remove();const k=T(s,l?"completed":"pending",i,!0,a,d);console.log(`[Debug] New task classList after toggle: ${k.classList}`),console.log("[Debug] toggleTask finished."),S()}catch(e){console.error("Error in toggleTask:",e)}}function K(t){console.log("[Debug] deleteTask called");try{const e=t.target.closest("button");if(!e){console.warn("Delete button not found");return}const o=e.closest("li");if(!o){console.error("Parent li not found");return}const n=o.querySelector(".task-text").textContent,s=m.contains(o),l=o.dataset.dueDate||"",i=parseInt(o.dataset.priority)||3,a=o.dataset.details||"";U({id:Date.now().toString(),text:n,status:s?"completed":"pending",dueDate:l,priority:i,details:a}),console.log("[Debug] Applying leaving animation"),o.classList.add("task-item-leaving"),o.addEventListener("transitionend",()=>{console.log("[Debug] Transition ended, removing and saving"),o.parentNode?(o.remove(),console.log("[Debug] List item removed."),I()):console.warn("Item already removed?"),console.log("[Debug] deleteTask (after transition) finished.")},{once:!0})}catch(e){console.error("Error in deleteTask:",e)}}function O(){if(console.log("[Debug] Initializing drag and drop"),typeof Sortable>"u"){console.error("Sortable library not loaded.");return}u?(new Sortable(u,{animation:150,ghostClass:"sortable-ghost",chosenClass:"sortable-chosen",dragClass:"sortable-drag",handle:".list-group-item",onEnd:function(t){console.log("[Debug] Drag ended, saving order."),I()}}),console.log("[Debug] SortableJS initialized for active list.")):console.error("Cannot init SortableJS: taskList missing.")}function A(t="priority"){const e=Array.from(u.children);e.sort((o,n)=>{if(t==="priority"){const s=parseInt(o.dataset.priority)||0;return(parseInt(n.dataset.priority)||0)-s}else if(t==="date-asc"){const s=new Date(o.dataset.createdAt||0),l=new Date(n.dataset.createdAt||0);return s-l}else if(t==="date-desc"){const s=new Date(o.dataset.createdAt||0);return new Date(n.dataset.createdAt||0)-s}}),e.forEach(o=>u.appendChild(o)),I()}function Q(){const e=document.getElementById("task-list-area").querySelector(".card-header"),o=e.querySelector(".sort-button-group");o&&o.remove();const n=document.createElement("div");n.classList.add("sort-button-group","btn-group");const s=document.createElement("button");s.classList.add("btn","btn-outline-primary","btn-sm","sort-button"),s.innerHTML='<i class="fas fa-star me-1"></i>優先度',s.addEventListener("click",()=>A("priority"));const l=document.createElement("button");l.classList.add("btn","btn-outline-primary","btn-sm","sort-button"),l.innerHTML='<i class="fas fa-clock me-1"></i>新しい順',l.addEventListener("click",()=>A("date-desc"));const i=document.createElement("button");i.classList.add("btn","btn-outline-primary","btn-sm","sort-button"),i.innerHTML='<i class="fas fa-clock me-1"></i>古い順',i.addEventListener("click",()=>A("date-asc")),n.appendChild(s),n.appendChild(l),n.appendChild(i),e.appendChild(n)}window.addEventListener("load",()=>{console.log("[Debug] Window load event fired"),p&&y&&L&&u&&m?(typeof H=="function"?H():console.error("loadTasks not found"),typeof O=="function"?O():console.error("initializeDragAndDrop not found"),typeof S=="function"?(setInterval(S,6e4),console.log("[Debug] Remaining time updater initialized.")):console.error("updateRemainingTimes function not found"),Q()):console.error("Cannot run initialization: essential elements missing.")});function V(t){D=t;const e=t.querySelector(".task-text").textContent,o=t.dataset.dueDate||"",n=parseInt(t.dataset.priority)||3,s=t.dataset.details||"";P.value=e,z.value=o?o.slice(0,16):"",W.value=n,R.value=s,J.show()}function X(){if(!D)return;const t=P.value.trim(),e=z.value,o=parseInt(W.value),n=R.value;if(t){const s=m.contains(D);D.remove(),T(t,s?"completed":"pending",e,!0,o,n),J.hide(),D=null}else alert("タスク内容を入力してください。")}q&&q.addEventListener("click",X);function Y(t){const e=t.querySelector(".task-text").textContent,o=t.dataset.dueDate,n=parseInt(t.dataset.priority)||0,s=t.dataset.details||"",l=t.dataset.createdAt;t.remove(),T(e,"in-progress",o,!0,n,s,l)}console.log("--- script.js finished executing ---");
